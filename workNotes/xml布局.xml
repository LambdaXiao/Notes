<ListView
        android:id="@android:id/list"
        android:layout_width="1400dp"
        android:layout_height="wrap_content"
        android:cacheColorHint="#00000000"
        android:divider="@drawable/listview_divider"
        android:dividerHeight="1.0dip"
        android:drawSelectorOnTop="false"
        android:fadingEdgeLength="0.0sp"
        android:fastScrollEnabled="true"
        android:listSelector="#00000000" >
    </ListView>

用match_parent代替fill_parent
xml根节点的高宽不要用固定的高度，尽量都用match_parent

文字单位用sp
高宽间距单位用dp(兼容性好)

dp:  (Density-independent pixel). 密度无关像素单位。
dip: dp的另一种写法。
px: pixel. 像素点。
mm: millimeters .毫米。
in: inches,英寸。
pt:points,点(英寸的 1/72)

################################=====android 常用 属性======#####################################

android:autoLink="web" 超链接

android:background  	设置背景色/背景图片。可以通过以下两种方法设置背景为透明：”@android :color/transparent”和”@null”。注意TextView默认是透明的，不用写此属性，但是Buttom/ImageButton/ImageView想透明的话就得写这个属性了

android:clickable   	是否响应点击事件
android:longClickable 	设置是否响应长按事件.
android:minHeight 	设置视图最小高度 
android:minWidth 	设置视图最小宽度度 


 删除android ScrollView边界阴影方法方法
 android:overScrollMode="never" (适用于2.3及以上的 否则不用设置)

 在xml中添加：android:fadingEdge=”none” 
代码中添加：ScrollView.setHorizontalFadingEdgeEnabled(false);


android:drawingCacheQuality 	设置绘图时半透明质量。有以下值可设置：auto（默认，由框架决定）/high（高质量，使用较高的颜色深度，消耗更多的内存）/low（低质量，使用较低的颜色深度，但是用更少的内存）

android:focusable 	设置是否获得焦点。若有requestFocus()被调用时，后者优先处理。注意在表单中想设置某一个如EditText获取焦点，光设置这个是不行的，需要将这个EditText前面的focusable都设置为false才行。在Touch模式下获取焦点需要设置focusableInTouchMode为true。

android:focusableInTouchMode 	设置在Touch模式下View是否能取得焦点
android:keepScreenOn		View在可见的情况下是否保持唤醒状态。常在LinearLayout使用该属性

android:nextFocusDown 		设置下方指定视图获得下一个焦点。焦点移动是基于一个在给定方向查找最近邻居的算法。如果指定视图不存在，移动焦点时将报运行时错误。可以设置imeOptions= actionDone，这样输入完即跳到下一个焦点。


android:nextFocusLeft 		设置左边指定视图获得下一个焦点。 

android:nextFocusRight 		设置右边指定视图获得下一个焦点。 

android:nextFocusUp 		设置上方指定视图获得下一个焦点。 

android:onClick 		点击时从上下文中调用指定的方法。这里指定一个方法名称，一般在Activity定义符合如下参数和返回值的函数并将方法名字符串指定为该值即可： 
					public void onClickButton(View view) 
					android:onClick=” onClickButton” 

android:padding 		设置上下左右的边距，以像素为单位填充空白。 

android:paddingBottom 		设置底部的边距，以像素为单位填充空白。 

android:paddingLeft 		设置左边的边距，以像素为单位填充空白。 

android:paddingRight 		设置右边的边距，以像素为单位填充空白。. 

android:paddingTop 		设置上方的边距，以像素为单位填充空白。

android:saveEnabled 		设置是否在窗口冻结时（如旋转屏幕）保存View的数据，默认为true，但是前提是你需要设置id才能自动保存，参见这里。 

android:scrollX 		以像素为单位设置水平方向滚动的的偏移值，在GridView中可看的这个效果。 

android:scrollY 		以像素为单位设置垂直方向滚动的的偏移值 

android:tag 			设置一个文本标签。
android:visibility 		设置是否显示View

android:soundEffectsEnabled 	设置点击或触摸时是否有声音效果 

android:scrollbarDefaultDelayBeforeFade 设置N毫秒后开始淡化，以毫秒为单位。 

android:scrollbarFadeDuration 设置滚动条淡出效果（从有到慢慢的变淡直至消失）时间，以毫秒为单位。。 

android:scrollbarSize 设置滚动条的宽度。 

android:scrollbarStyle 设置滚动条的风格和位置。设置值：insideOverlay、insideInset、outsideOverlay、outsideInset

android:scrollbarThumbHorizontal 设置水平滚动条的drawable（如颜色）。 

android:scrollbarThumbVertical 设置垂直滚动条的drawable（如颜色）. 

android:scrollbarTrackHorizontal 设置水平滚动条背景（轨迹）的色drawable（如颜色） 

android:scrollbarTrackVertical 
设置垂直滚动条背景（轨迹）的drawable注意直接设置颜色值如”android:color/white”将得出很难看的效果，甚至都不理解这个属性了，这里可以参见ApiDemos里res/drawable/ scrollbar_vertical_thumb.xml和scrollbar_vertical_track.xml，设置代码为：android:scrollbarTrackVertical ="@drawable/scrollbar_vertical_track" 

android:scrollbars 设置滚动条显示。none（隐藏），horizontal（水平），vertical（垂直）。

=========================================================================================线性布局==
android:weightSum="3"    表示LinearLayout中额外空间的划分
android:layout_weight    仅此布局中使用
android:hapticFeedbackEnabled 	设置长按时是否接受其他触摸反馈事件。
android:isScrollContainer 	设置当前View为滚动容器。这里没有测试出效果来，ListView/ GridView/ ScrollView根本就不用设置这个属性，而EdidText设置android:scrollbars也能出滚动条。 
=========================================================================================相对布局==

=========================================================================================帧布局==

=========================================================================================表格布局==
表格布局即列属性
android:stretchColumns="1"	是设置 TableLayout所有行的第二列为扩展列。 
				也就是说如果每行都有三列的话，剩余的空间由第二列补齐
android:shrinkColumns     	设置可收缩的列。当该列子控件的内容太多，已经挤满所在行，那么该子控件的内容将往列方向显示。
android:collapseColumns 	设置要隐藏的列。 
单元格属性，有以下2个参数：
android:layout_column    指定该单元格在第几列显示
android:layout_span        指定该单元格占据的列数（未指定时，为1）
=========================================================================================画横线====
  <View
        android:layout_width="fill_parent"
        android:layout_height="1dip"
        android:background="@color/white" />
=========================================================================================编辑框==
android:inputType="none"--输入普通字符  
android:inputType="text"--输入普通字符  
android:inputType="textCapCharacters"--输入普通字符  
android:inputType="textCapWords"--单词首字母大小  
android:inputType="textCapSentences"--仅第一个字母大小  
android:inputType="textAutoCorrect"--前两个自动完成  
android:inputType="textAutoComplete"--前两个自动完成  
android:inputType="textMultiLine"--多行输入  
android:inputType="textImeMultiLine"--输入法多行（不一定支持）  
android:inputType="textNoSuggestions"--不提示  
android:inputType="textUri"--URI格式  
android:inputType="textEmailAddress"--电子邮件地址格式  
android:inputType="textEmailSubject"--邮件主题格式  
android:inputType="textShortMessage"--短消息格式  
android:inputType="textLongMessage"--长消息格式  
android:inputType="textPersonName"--人名格式  
android:inputType="textPostalAddress"--邮政格式  
android:inputType="textPassword"--密码格式  
android:inputType="textVisiblePassword"--密码可见格式  
android:inputType="textWebEditText"--作为网页表单的文本格式  
android:inputType="textFilter"--文本筛选格式  
android:inputType="textPhonetic"--拼音输入格式  
android:inputType="number"--数字格式  
android:inputType="numberSigned"--有符号数字格式  
android:inputType="numberDecimal"--可以带小数点的浮点格式  
android:inputType="phone"--拨号键盘  
android:inputType="datetime"  
android:inputType="date"--日期键盘  
android:inputType="time"--时间键盘 
android:autoLink="all"    自动换行
==========================================================================================spinner===

加数组 android:entries="@array/ENOMarekts"
标题 android:prompt="@string/ENOStockMarketDisplay"
==========================================================================================listview===

android:divider="#fffff"  分割线颜色  
android:dividerHeight="1px"  分割线高度  

纯数字 android:numeric="true"  　　　　让输入法自动变为数字输入键盘，同时仅允许0-9的数字输入
仅允许 android:capitalize="haoTest" 　　仅允许接受输入haoTest，一般用于密码验证
android:editable="false" 　　　　　　　　设置EditText不可编辑
android:singleLine="true" 　　　　　　　强制输入的内容在单行
android:ellipsize="end" 　　　　　　　　自动隐藏尾部溢出数据，一般用于文字内容过长一行无法全部显示时
android:scrollbars="none"               不要滚动条
android:fastScrollEnabled="true"        快速滚动
android:stackFromBottom="true"          需要listview显示最下面的内容
android:cacheColorHint="#00000000"      listview在滑动式有个系统默认颜色,一般我们都会把他设置成透明
android:listSelector="#00000000"。       点击透明色
android:listSelector="@color/red"       点击listview选中item时

android:overScrollMode="never"          去掉滚动时的阴影

android:fadingEdgeLength="5dip"         设置滚动条渐变的长度
android:fadingEdge="vertical"           :拉滚动条时 ，边框渐变的放向,none（边框颜色不变），horizontal（水平方向颜色变淡），vertical（垂直方向颜色变淡）
这些需要在setAdapter方法和notifyDataSetChanged方法之后调用。
滑动到底部listview .setSelection(listview .getCount()-1);或者xm_pg_lv.setSelection(myAdapter.getCount() - 1);

滑动到顶部listview .setSelection(0);

android:drawSelectorOnTop="true"  点击某一条记录，颜色会显示在最上面，记录上的文字被遮住，所以点击文字不放，文字就看不到
android:drawSelectorOnTop="false" 点击某条记录不放，颜色会在记录的后面，成为背景色，但是记录内容的文字是可见的

2,==================================================================layout_gravity与gravity的区别===

gravity 这个英文单词是重心的意思，在这里就表示停靠位置的意思。
从名字上可以看到，android:gravity是对元素本身说的，元素本身的文本显示在什么地方靠着换个属性设置，不过不设置默认是在左侧的。
android:layout_gravity是相对与它的父元素说的，说明元素显示在父元素的什么位置。
比如说button： android:layout_gravity 表示按钮在界面上的位置。 android:gravity表示button上的字在button上的位置。
可选值
这两个属性可选的值有：top、bottom、left、right、center_vertical、fill_vertical、center_horizontal、fill_horizontal、center、fill、clip_vertical。
而且这些属性是可以多选的，用“|”分开。
默认这个的值是：Gravity.LEFT

3,===============================================================android:layout_weight===

“首先声明只有在Linearlayout中，该属性才有效”。之所以android:layout_weight会引起争议，是因为在设置该属性的同时，设置android:layout_width为wrap_content和match_parent会造成两种截然相反的效果layout_weight 用于给一个线性布局中的诸多视图的重要度赋值。 
     所有的视图都有一个layout_weight值，默认为零，意思是需要显示 
     多大的视图就占据多大的屏幕空 间。若赋一个高于零的值，则将父视 
     图中的可用空间分割，分割大小具体取决于每一个视图的layout_weight 
       值以及该值在当前屏幕布局的整体 layout_weight值和在其它视图屏幕布 
     局的layout_weight值中所占的比率而定。

10，=================================================================================================include==
<include
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom"
        layout="@layout/bottom_backgroud" />

被引用的布局的属性中，只有，外层的layout属性可以被修改，内部属性不能被修改。
11,===============================================================================================自定义控件==
<com.eno.view.TabSwitcher
            xmlns:app="http://schemas.android.com/apk/res/com.eno.qq.page"
            android:id="@+id/tabSwitcher"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" 
            app:arrayId="@array/hqtabs"
            android:background="@drawable/border"
            /> 

12，==========================================================使用<merge /> 标签来减少视图层级结构=======

在Android layout文件中需要一个顶级容器来容纳其他的组件，而不能直接放置多个组件，它在优化UI结构时起到很重要的作用。目的是通过删减多余或者额外的层级，从而优化整个Android Layout的结构。

当应用Include或者ViewStub标签从外部导入xml结构时，可以将被导入的xml用merge作为根节点表示，这样当被嵌入父级结构中后可以很好的将它所包含的子集融合到父级结构中，而不会出现冗余的节点。
1.merge布局 和FrameLayout类似,相同的效果.不同的是 merge布局只能被<include>标签包含. 或者Activity.setContentView所使用.

当LayoutInflater遇到能被其他layout用<include>包含进去，并不再另外生成ViewGroup容器，本元素也特别有用这个标签时，它会跳过它，并将<merge />内的元素添加到<merge />的父元素里. Activity能直接使用的原因是Activity的父元素是FrameLayout
2 merge 能被其他layout用<include>包含进去，并不再另外生成ViewGroup容器.就是说,会减少一层layout到达优化layout的目的

另外有两点需要特别注意：

<merge />只能作为XML布局的根标签使用
·        当Inflate以<merge />开头的布局文件时，必须指定一个父ViewGroup，并且必须设定attachToRoot为true（参看inflate(int, android.view.ViewGroup, Boolean)方法）。

merge标签用来消除我们在include一个布局到另一个布局时所产生的冗余view group。比如现在很多布局中会有两个连续的Button，于是我们将这两个连续的Button做成可复用布局(re-usable layout)。在使用include标签时我们必须先将这两个Button用一个view group比如LinearLayout组织在一起然后供其它布局使用，如果是include的地方也是LiearLayout就会造成有两层连续的LiearLayout，除了降低UI性能没有任何好处。这个时候我们就可以使用<merge/>标签作为可复用布局的root view来避免这个问题。

当我们用<include/>标签复用上述代码时，系统会忽略merge元素，直接将两个连续的Button放在<include/>标签所在处。

==============================================================================================页面是否弹出软键盘==

例如:<activity android:windowSoftInputMode="stateVisible|adjustResize". . . >

在这设置的值(除"stateUnspecified"和"adjustUnspecified"以外)将覆盖在主题中设置的值


各值的含义：
【A】stateUnspecified：软键盘的状态并没有指定，系统将选择一个合适的状态或依赖于主题的设置
【B】stateUnchanged：当这个activity出现时，软键盘将一直保持在上一个activity里的状态，无论是隐藏还是显示
【C】stateHidden：用户选择activity时，软键盘总是被隐藏
【D】stateAlwaysHidden：当该Activity主窗口获取焦点时，软键盘也总是被隐藏的
【E】stateVisible：软键盘通常是可见的
【F】stateAlwaysVisible：用户选择activity时，软键盘总是显示的状态
【G】adjustUnspecified：默认设置，通常由系统自行决定是隐藏还是显示

【H】adjustResize：该Activity总是调整屏幕的大小以便留出软键盘的空间
【I】adjustPan：当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分

================================================================================================drawable下的自定义xml====
1,shape边框

<?xml version="1.0" encoding="utf-8"?>  
<shape xmlns:android="http://schemas.android.com/apk/res/android" 
    android:shape="rectangle" >  
    
   <!-- 填充 -->
    <solid android:color="@color/white"/>
<!-- 大小 -->
    <size
        android:width="50dp"
        android:height="50dp"/><!-- 宽度和高度 -->
   <!-- 圆角 -->
    <corners
       android:radius="5dp" 
	android:topLeftRadius="2dp"
        android:topRightRadius="2dp"
        android:bottomLeftRadius="2dp"
        android:bottomRightRadius="2dp"/><!-- 设置圆角半径 -->
<!-- 渐变 -->                                   angle的值必须是45的倍数（包括0），仅在type="linear"有效
            <gradient
                android:startColor="@android:color/white"
        	android:centerColor="@android:color/black"
        	android:endColor="@android:color/black"
        	android:useLevel="true"
        	android:angle="45"
        	android:type="radial"
        	android:centerX="0"
        	android:centerY="0"
        	android:gradientRadius="90"/>
<!-- 描边 -->dashWidth和dashGap属性，只要其中一个设置为0dp，则边框为实线边框
            <stroke
                android:width="2dp"
        	android:color="@android:color/black"
        	android:dashWidth="1dp"   设置虚线的宽度
        	android:dashGap="2dp"/>   设置虚线的间隔宽度
    <padding
       android:left="10dp"
       android:top="5dp"
       android:right="10dp"
       android:bottom="5dp" />  
</shape>  
                             
solid：实心，就是填充的意思
android:color指定填充的颜色

gradient：渐变
android:startColor和android:endColor分别为起始和结束颜色，ndroid:angle是渐变角度，必须为45的整数倍。
另外渐变默认的模式为android:type="linear"，即线性渐变，可以指定渐变为径向渐变，android:type="radial"，径向渐变需要指定半径android:gradientRadius="50"。

stroke：描边
android:width="2dp" 描边的宽度，android:color 描边的颜色。
我们还可以把描边弄成虚线的形式，设置方式为：
android:dashWidth="5dp" 
android:dashGap="3dp"
其中android:dashWidth表示'-'这样一个横线的宽度，android:dashGap表示之间隔开的距离。

corners：圆角
android:radius为角的弧度，值越大角越圆。
我们还可以把四个角设定成不同的角度，方法为：
<corners 
        android:topRightRadius="20dp"    右上角
        android:bottomLeftRadius="20dp"    右下角
        android:topLeftRadius="1dp"    左上角
        android:bottomRightRadius="0dp"    左下角
 />
这里有个地方需要注意，bottomLeftRadius是右下角，而不是左下角，这个有点郁闷，不过不影响使用，记得别搞错了就行。
还有网上看到有人说设置成0dp无效，不过我在测试中发现是可以的，我用的是2.2，可能修复了这个问题吧，如果无效的话那就只能设成1dp了。

padding：间隔
这个就不用多说了，XML布局文件中经常用到。

2,selector选择器

<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">

    <item android:drawable="@drawable/btn_blue_press"   android:state_pressed="true"   android:state_enabled="true" />
    <item android:drawable="@drawable/btn_blue_press"   android:state_pressed="true"   android:state_enabled="false" />
    <item android:drawable="@drawable/btn_blue_press"   android:state_pressed="false"  android:state_enabled="false"  />
    <item android:drawable="@drawable/btn_blue_unpress" android:state_pressed="false"  android:state_enabled="true" />

</selector>
   <item> 
          android:state_pressed 
               Boolean。“true”表示按下状态使用（例如按钮按下）；“false” 
               表示非按下状态使用。 
           android:state_focused 
               Boolean。“true”表示聚焦状态使用（例如使用滚动球/D-pad 
               聚焦Button）；“false”表示非聚焦状态使用。 
           android:state_selected 
               Boolean。“true”表示选中状态使用（例如Tab 打开）；“false” 
               表示非选中状态使用。 
           android:state_checkable 
               Boolean。“true”表示可勾选状态时使用；“false”表示非可 
               勾选状态使用。（只对能切换可勾选—非可勾选的构件有用。） 
           android:state_checked 
                 Boolean。“true”表示勾选状态使用；“false”表示非勾选 
状态使用。 
           android:state_enabled 
               Boolean。“true”表示可用状态使用（能接收触摸/点击事件）； 
               “false”表示不可用状态使用。 
           android:window_focused 
              Boolean。“true”表示应用程序窗口有焦点时使用（应用程序 
              在前台）；“false”表示无焦点时使用（例如Notification栏拉 
              下或对话框显示）。
     注意：记住一点，StateList中第一个匹配当前状态的item会被使用。因此，如果第一个item没
     有任何状态特性的话，那么它将每次都被使用，这也是为什么默认的值必须总是在最后

3,翻转

// 旋转
        animation = new RotateAnimation(-180, 0, RotateAnimation.RELATIVE_TO_SELF, 0.5f, RotateAnimation.RELATIVE_TO_SELF, 0.5f);
        animation.setInterpolator(new LinearInterpolator());
        animation.setDuration(300);
        animation.setFillAfter(true);

        //反向旋转
        reverseAnimation = new RotateAnimation(0, -180, RotateAnimation.RELATIVE_TO_SELF, 0.5f, RotateAnimation.RELATIVE_TO_SELF, 0.5f);
        reverseAnimation.setInterpolator(new LinearInterpolator());
        reverseAnimation.setDuration(300);
        reverseAnimation.setFillAfter(true);
image.clearAnimation();
image.startAnimation(Animation);
或image.startAnimation(reverseAnimation);


连续旋转1
<animation-list xmlns:android="http://schemas.android.com/apk/res/android"
    android:oneshot="false">

    <item
        android:drawable="@mipmap/refresh_loading01"
        android:duration="100" />
    <item
        android:drawable="@mipmap/refresh_loading02"
        android:duration="100" />
    <item
        android:drawable="@mipmap/refresh_loading03"
        android:duration="100" />
    <item
        android:drawable="@mipmap/refresh_loading04"
        android:duration="100" />
    <item
        android:drawable="@mipmap/refresh_loading05"
        android:duration="100" />
    <item
        android:drawable="@mipmap/refresh_loading06"
        android:duration="100" />
    <item
        android:drawable="@mipmap/refresh_loading07"
        android:duration="100" />
    <item
        android:drawable="@mipmap/refresh_loading08"
        android:duration="100" />
    <item
        android:drawable="@mipmap/refresh_loading09"
        android:duration="100" />
    <item
        android:drawable="@mipmap/refresh_loading10"
        android:duration="100" />
    <item
        android:drawable="@mipmap/refresh_loading11"
        android:duration="100" />
    <item
        android:drawable="@mipmap/refresh_loading12"
        android:duration="100" />

</animation-list>

连续旋转2
<ProgressBar
        android:id="@+id/pb_foot_refreshing"
        style="?android:attr/progressBarStyleSmall"
        android:layout_width="30dp"
        android:layout_height="30dp"
        android:layout_centerVertical="true"
        android:layout_marginRight="15dp"
        android:layout_toLeftOf="@id/tv_foot_title"
        android:indeterminateDrawable="@drawable/pull_list_view_progressbar"
        android:indeterminateDuration="1000"
        android:visibility="gone" />

<?xml version="1.0" encoding="utf-8"?>
<rotate xmlns:android="http://schemas.android.com/apk/res/android"
android:drawable="@drawable/pull_list_view_progressbar_bg"
android:fromDegrees="360"
android:pivotX="50%"
android:pivotY="50%"
android:toDegrees="0" />

4,layer-list

<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- 阴影 -->
    <item>
        <shape android:shape="rectangle">
            <!-- 阴影颜色 -->
            <gradient
                android:angle="90"
                android:endColor="#b7b7b7"
                android:startColor="#e8e8e8" />
            <!-- 阴影圆角 -->
            <corners android:radius="0dp" />
        </shape>
    </item>
    <!-- 前景 -->
    <item android:bottom="2dp"> <!-- 阴影厚度 -->
        <shape android:shape="rectangle">
            <solid android:color="#fff" /> <!-- 前景颜色 -->
            <corners android:radius="0dp" /> <!-- 前景圆角 -->
        </shape>
    </item>
</layer-list>

5,vector 

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FFFFFFFF"
        android:pathData="M20,11H7.83l5.59,-5.59L12,4l-8,8 8,8 1.41,-1.41L7.83,13H20v-2z" />
</vector>

6,专门放drawable-v21  5.0文件夹下的选择器

<ripple xmlns:android="http://schemas.android.com/apk/res/android"
    android:color="#FFEEEEEE">
    <item android:drawable="@drawable/view_shadow" />

</ripple>
===========================================================================================anim下的自定义xml===============

<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android">
		//平移的使用 fromXDelta="100%p" android:toXDelta="0"  支持使用 %，如 “50%“ 获取的是这个view的百分之50，除此之外还有另外一种写法：”50%p			“ 意思是获取这个view的上一级view的百分之50 当然，指定特定值也是支持的“22.2”，不过为了兼容更多的android设备建议还是使用百分比的值。
    <translate android:fromYDelta="100%p" android:toYDelta="0"  
            android:duration="2000"/>
    <alpha android:fromAlpha="0.0" android:toAlpha="1.0"
            android:duration="2000" />

	<scale android:fromXScale  //缩放
		android：fromYScale
		android:toXScale
		android：toYScale
		android:pivotX
		android:pivotX
            	android:duration="2000" />
</set>

=========================================================================================ProgressBar==========

二、XML重要属性

　　　　android:progressBarStyle：默认进度条样式

　　　　android:progressBarStyleHorizontal：水平样式

 

三、重要方法

　　　　getMax()：返回这个进度条的范围的上限

　　　　getProgress()：返回进度

　　　　getSecondaryProgress()：返回次要进度

　　　　incrementProgressBy(int diff)：指定增加的进度

　　　　isIndeterminate()：指示进度条是否在不确定模式下

　　　　setIndeterminate(boolean indeterminate)：设置不确定模式下

　　　　setVisibility(int v)：设置该进度条是否可视

四、重要事件

　　　　onSizeChanged(int w, int h, int oldw, int oldh)：当进度值改变时引发此事件

style="?android:attr/progressBarStyleHorizontal"   
设置风格为长形 
android:max="100"   
最大进度值为100
android:progress="50"  
初始化的进度值
android:secondaryProgress="70" 
初始化的底层第二个进度值 
android:layout_gravity="center_vertical"   
垂直居中

②代码中运用

private ProgressBar myProgressBar;
//定义ProgressBar
myProgressBar = (ProgressBar) findViewById(R.id.progressbar_updown);
//ProgressBar通过ID来从XML中获取
myProgressBar.incrementProgressBy(5);
//ProgressBar进度值增加5
myProgressBar.incrementProgressBy(-5);
//ProgressBar进度值减少5
myProgressBar.incrementSecondaryProgressBy(5);
//ProgressBar背后的第二个进度条 进度值增加5
myProgressBar.incrementSecondaryProgressBy(-5);
//ProgressBar背后的第二个进度条 进度值减少5

<ProgressBar
		        android:indeterminateDrawable="@drawable/bg_progressbar_circle"
		        android:id="@+id/progressBarCircle"
		        android:indeterminateBehavior="repeat"
		        android:indeterminateDuration="3500"
		        style="?android:attr/progressBarStyle"
		        android:layout_width="30dip"
		        android:layout_height="30dip"
		        android:layout_gravity="center"
		        android:visibility="gone" />


===================================================下划线==============
android中为textview动态设置字体为粗体
TextView textView = (TextView)findViewById(R.id.textView);
TextPaint tp = textView .getPaint();
tp.setFakeBoldText(true);

下划线
register.setText(Html.fromHtml("<u>"+"注册"+"</u>"));
textView.getPaint().setFlags(Paint. UNDERLINE_TEXT_FLAG ); //下划线

textView.getPaint().setAntiAlias(true);//抗锯齿

textview.getPaint().setFlags(Paint. STRIKE_THRU_TEXT_FLAG); //中划线

setFlags(Paint. STRIKE_THRU_TEXT_FLAG|Paint.ANTI_ALIAS_FLAG);  // 设置中划线并加清晰 

textView.getPaint().setFlags(0);  // 取消设置的的划线
=================================================================
在帮TextView控件设置大小的时候，发现和在XML中用PX设置的不一样，原因是setTextSize()默认的单位是sp，可以用另一个设置字体大小的方法：

setTextSize(int unit, int size)

第一个参数可设置如下静态变量：

TypedValue.COMPLEX_UNIT_PX : Pixels
TypedValue.COMPLEX_UNIT_SP : Scaled Pixels
TypedValue.COMPLEX_UNIT_DIP : Device Independent Pixels

============================================================重写view方法===============
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) 

protected void onLayout(boolean changed, int l, int t, int r, int b)

===========================================================
ldpi：240x320
mdpi：320x480
hdpi：480x800、480x854
xhdpi：至少960*720
xxhdpi：1280×720
mipmap-mdpi   48 * 48

mipmap-hdpi   72 * 72

mipmap-xhdpi  96 * 96

mipmap-xxhdpi 144 * 144    对应720P宽度下的切图  标清SD

mipmap-xxxhdpi 192 * 192   对应1080P宽度下的切图 高清HD

市场上主流分辨率有：480*800、 720*1280、 1080*1920（其他的早该淘汰了，忽略不计）。

L DPI ( Low Density Screen，120 DPI )，其图标大小为 36 x 36 px
M DPI ( Medium Density Screen, 160 DPI )，其图标大小为 48 x 48 px
H DPI ( High Density Screen, 240 DPI )，其图标大小为 72 x 72 px
XH DPI ( Extra-high density screen, 320 DPI )，其图标大小为 96 x 96 px
XXH DPI( xx-high density screen, 480 DPI )，其图标大小为144 x 144 px
XXXH DPI( xxx-high density screen, 640 DPI )，其图标大小为192 x 192 px

不透明度	16进制值
100%	FF
95%	F2
90%	E6
85%	D9
80%	CC
75%	BF
70%	B3
65%	A6
60%	99
55%	8C
50%	80
45%	73
40%	66
35%	59
30%	4D
25%	40
20%	33
15%	26
10%	1A
5%	0D
0%	00


名称	对应 DPI	比例(以 mdpi 为基数 1)	和px的换算关系
lpdi	120 DPI	0.75	1 dp = 0.75 px
mdpi	160 DPI	1	1 dp = 1 px
hdpi	240 DPI	1.5	1 dp = 1.5 px
xhdpi	320 DPI	2	1 dp = 2 px
xxhdpi	480 DPI	3	1 dp = 3 px
xxxhdpi	640 DPI	4	1 dp = 4 px

======================================VISIBLE, =========
有三个值 visibility  One of VISIBLE, INVISIBLE, or GONE. 

常量值为0，意思是可见的
常量值为4，意思是不可见的
常量值为8，意思是不可见的，而且不占用布局空间 

==================================================ImageView的属性android:scaleType====================

1  这里我们重点理解ImageView的属性android:scaleType，即ImageView.setScaleType(ImageView.ScaleType)。android:scaleType是控制图片如何resized/moved来匹对ImageView的size。ImageView.ScaleType / android:scaleType值的意义区别：
 2  
 3 CENTER /center  按图片的原来size居中显示，当图片长/宽超过View的长/宽，则截取图片的居中部分显示
 4  
 5 CENTER_CROP / centerCrop  按比例扩大图片的size居中显示，使得图片长(宽)等于或大于View的长(宽)
 6  
 7 CENTER_INSIDE / centerInside  将图片的内容完整居中显示，通过按比例缩小或原来的size使得图片长/宽等于或小于View的长/宽
 8  
 9 FIT_CENTER / fitCenter  把图片按比例扩大/缩小到View的宽度，居中显示
10  
11 FIT_END / fitEnd   把图片按比例扩大/缩小到View的宽度，显示在View的下部分位置
12  
13 FIT_START / fitStart  把图片按比例扩大/缩小到View的宽度，显示在View的上部分位置
14  
15 FIT_XY / fitXY  把图片不按比例扩大/缩小到View的大小显示
16  
17 MATRIX / matrix 用矩阵来绘制